#! /usr/bin/env perl

use strict;
use warnings;
use English;
use Cwd 'abs_path';

use File::Temp qw{:mktemp};

use constant { TRUE => 1, FALSE => 0 };

my ($_gid) = split(/ /,$GID);
my $_uid = $UID;

# ------------------------------------------------------------------------
# Read command line
# ------------------------------------------------------------------------

use File::Basename;
use Getopt::Std;

our $opt_T = $ENV{HOWTO_TMPDIR} || "/tmp";
our $opt_b = $ENV{HOWTO_BACKEND} || "singularity";
our $opt_c;
our $opt_e = "";
our $opt_f;
our $opt_h;
our $opt_l;
our $opt_m = $ENV{HOWTO_MOUNT_DIR} || ".";
our $opt_n;
our $opt_p;
our $opt_q;
our $opt_s;
our $opt_t;
our $opt_v;

my $docker_cmd = $ENV{HOWTO_DOCKER_CMD} || "docker";
my $singularity_cmd = $ENV{HOWTO_SINGULARITY_CMD} || "singularity";

sub usage {
  my $progname = basename($0);
  print STDERR "Usage: $progname [options] cmd args ...\n";
  print STDERR "Usage: $progname [options] -l\n";
  print STDERR "Usage: $progname [options] -p cmd1 cmd2\n";
  print STDERR "Usage: $progname [options] -p '*'\n";

  print STDERR "-T TMPDIR - mount TMDIR as /tmp [$opt_T]\n";
  print STDERR "-b BACKEND - \"docker\", \"singularity\" [$opt_b]\n";
  print STDERR "-c alt_cmd - use image for alt_cmd to run cmd\n";
  print STDERR "-e VAR1,VAR2,... - export values of environment variables VAR1,VAR2,... to docker\n";
  print STDERR "-f FILENAME - config file [./.howto.yaml or ~/.howto.yaml]\n";
  print STDERR "-h - print help\n";
  print STDERR "-l - list known commands and images\n";
  print STDERR "-m DIR - mount directory tree DIR [\$HOWTO_MOUNT_DIR or \".\"]\n";
  print STDERR "-n - dryrun. print but do not execute commands. implies -v\n";
  print STDERR "-p - pull packages\n";
  print STDERR "-q - quiet, suppress all output\n";
  print STDERR "-s - open a shell instead of running the command\n";
  print STDERR "-t - ensure a tty (do not use with piped io)\n";
  print STDERR "-v - be verbose\n";

  exit(@_);
}

my $stat = getopts('T:b:c:e:f:hlm:npqstv');
if (!$stat) {
  usage(1);
}
if ($opt_h) {
  usage();
}

if ( $opt_n ) {
  $opt_v = TRUE;
}

$opt_b = lc($opt_b);

( $opt_b eq "docker" )
  || ( $opt_b eq "singularity" )
  || usage(1);

# ------------------------------------------------------------------------
# Figure out mount and working directories
# ------------------------------------------------------------------------

my $tmp_path = abs_path($opt_T) if (defined($opt_T));
my $mount_path = abs_path($opt_m);
my $cwd_path = abs_path($ENV{PWD});

if ( 0 != index($cwd_path,$mount_path) ) {
  print STDERR "Mount dir must be a parent of the pwd.\n";
  exit 1;
}

my @mount_stat_results = stat($mount_path);
my $mount_uid = $mount_stat_results[4];

if ( $mount_uid != $UID ) {
  print STDERR "Mount dir must be owned by current user.\n";
  exit 1;
}

my $cwd_suffix = substr($cwd_path,length($mount_path));

# ------------------------------------------------------------------------
# Read config file
# ------------------------------------------------------------------------

my $config_file;
if ( $opt_f ) {
  ( -r $opt_f ) || die "Cannot read <<$opt_f>>,";
  $config_file = $opt_f;
} else {
  foreach my $file ( "howto.yaml", ".howto.yaml" , "$ENV{HOME}/.howto.yaml" ) {
    if ( -r $file ) {
      $config_file = $file;
      last;
    }
  }
}
if ( !$config_file ) {
  die "Cannot find config file,";
}

use YAML;

my @config_elements = YAML::LoadFile($config_file);

# ------------------------------------------------------------------------
# Parse the config elements
# ------------------------------------------------------------------------

my %image_of;
my %is_command;
my %is_gui;
my %is_implicit;
my %is_java;
my %is_pvs;
my %is_tty;
my %user_of;
my %version_of;

foreach my $x ( @config_elements ) {
  my $ref_type = ref $x;
  if ( !$ref_type ) {
    die "Unexpected scalar element: <<$x>>,";
  } elsif ( $ref_type eq "HASH" ) {
    # nothing
  } else {
    die "Unexpected $ref_type element,"
  }

  foreach my $key ( keys %$x) {

    next if ($key eq "command");
    next if ($key eq "commands");
    next if ($key eq "direct");
    next if ($key eq "gui");
    next if ($key eq "image");
    next if ($key eq "implicit");
    next if ($key eq "java");
    next if ($key eq "pvs");
    next if ($key eq "tty");
    next if ($key eq "user");
    next if ($key eq "version");

    print STDERR "# ignoring unexpected key: <<$key>>\n";
  }

  my $chunk_direct = defined($x->{direct}) ? bool($x->{direct}) : FALSE;
  my $chunk_image = $x->{image};

  if ( !$chunk_direct && !defined($chunk_image) ) {
    die "Neither 'direct' nor 'image' is specified,";
  }
  if ( $chunk_direct && defined($chunk_image) ) {
    die "Both 'direct' and 'image' are specified,";
  }

  my $chunk_gui =  $x->{gui} || "false";
  my $chunk_implicit =  $x->{implicit} || "false";
  my $chunk_java =  $x->{java} || "false";
  my $chunk_pvs =  $x->{pvs} || "false";
  my $chunk_tty =  $x->{tty} || "false";
  my $chunk_user =  $x->{user} || join(":",$_uid,$_gid);
  my $chunk_version = $x->{version} || "latest";

  my @chunk_commands = ();
  if ( $x->{command} ) {
    push @chunk_commands, $x->{command};
  }
  if ( $x->{commands} ) {
    push @chunk_commands, @{$x->{commands}}
  }

  foreach my $y ( @chunk_commands ) {
    my $command_name;
    my $z;
    my $ref_type = ref $y;
    if ( !$ref_type ) {
      $command_name = $y;
      $z = {};
    } elsif ( $ref_type eq "HASH" ) {
      my ($name,$null) = keys %$y;
      if (!defined($name) || defined($null)) {
	die "Ill-formed command element,";
      }
      $command_name = $name;
      $z = $y->{$name};
    } else {
      die "Unexpected $ref_type element,"
    }

    foreach my $key ( keys %$z) {

      next if ($key eq "gui");
      next if ($key eq "tty");
      next if ($key eq "java");
      next if ($key eq "user");

      die "Unexpected key <<$key>>,";
    }

    my $command_gui =  $z->{gui} || $chunk_gui;
    my $command_tty =  $z->{tty} || $chunk_tty;
    my $command_java =  $z->{java} || $chunk_java;
    my $command_user =  $z->{user} || $chunk_user;

    if ( defined($is_command{$command_name}) ) {
      die "Duplicate command: $command_name,";
    }

    $is_command{$command_name} = TRUE;
    $image_of{$command_name} = $chunk_image;
    $version_of{$command_name} = $chunk_version;
    $is_implicit{$command_name} = bool($chunk_implicit);
    $is_pvs{$command_name} = bool($chunk_pvs);

    $is_gui{$command_name} = bool($command_gui);
    $is_tty{$command_name} = bool($command_tty);
    $is_java{$command_name} = bool($command_java);
    $user_of{$command_name} = $command_user;
  }
}

sub bool {
  my ($s) = @_;
  return TRUE if (lc($s) eq "true");
  return FALSE if (lc($s) eq "false");
  die "Unexpected boolean: <<$s>>,";
}

# ------------------------------------------------------------------------
# Docker primative commands
# ------------------------------------------------------------------------

sub _docker_do_pull {
  my ($image) = @_;
  my $stat = run($docker_cmd,"pull",$image);
  if ( $stat != 0 ) {
    return $stat;
  }
}

sub _docker_do_exec {
  my ($image_version,$alt_cmd,@exec_args) = @_;

  my @docker_args;

  if ( $is_pvs{$alt_cmd} || $image_version =~ /^pvstodghill\// ) {
    # Mount the current directory as container:/mnt
    push @docker_args, "-v", $mount_path.":/mnt";
    if ( $tmp_path ) {
      push @docker_args, "-v", $tmp_path.":/tmp";
    }
    push @docker_args, "-w", "/mnt".$cwd_suffix;
  }
  push @docker_args, "--user", $user_of{$alt_cmd};

  # set TERM
  push @docker_args, "-e", "TERM=".$ENV{TERM};
  # Don't log. It fills the disk.
  push @docker_args, "--log-driver=none";
  # Delete the container when finished.
  push @docker_args, "--rm";
  # so piping commands work
  push @docker_args, "-i";
  # run interactively
  if ( $opt_s || $opt_t || $is_tty{$alt_cmd} ) {
    push @docker_args, "-t";
  }
  # For Java commands, pass Java flags
  if ( $is_java{$alt_cmd} ) {
    my $JVM_FLAGS=$ENV{JVM_FLAGS};
    if ( defined($JVM_FLAGS) ) {
      push @docker_args, "-e", "\"JVM_FLAGS=$JVM_FLAGS\""
    }
  }
  # For GUI commands, pass X11 flags
  if ( $is_gui{$alt_cmd} ) {
    my $DISPLAY = $ENV{DISPLAY};
    ( defined($DISPLAY) ) || die "GUI command, but \$DISPLAY is not set,";
    if ( $OSNAME eq "linux" ) {
      push @docker_args, "-e", "DISPLAY=$DISPLAY";
      push @docker_args, "-v", "/tmp/.X11-unix:/tmp/.X11-unix";
    } elsif ( $OSNAME eq "darwin" ) {
      push @docker_args, darwin_x11_args();
    } else {
      die "Cannot start GUI commands on <<$OSNAME>>,";
    }
  }
  # export the variables
  foreach my $var ( split(/,/, $opt_e) ) {
    # fixme: should value better quoted?
    push @docker_args, "-e", ($var."=".$ENV{$var});
  }

  my $error = run($docker_cmd, "run", @docker_args, $image_version, @exec_args);

  return $error;
}

# ------------------------------------------------------------------------
# Singularity primative commands
# ------------------------------------------------------------------------

sub _singularity_do_pull {
  my ($image) = @_;
  $image = "docker://".$image;

  # this is not ideal...
  my $temp_sif = mktemp( "/tmp/howtoXXXXX" );

  my @silent_arg = $opt_q ? ("-s") : ();
  my $stat = run($singularity_cmd,@silent_arg,"pull",$temp_sif, $image);

  unlink($temp_sif);

  if ( $stat != 0 ) {
    return $stat;
  }
}

sub _singularity_do_exec {
  my ($image_version,$alt_cmd,@exec_args) = @_;

  my @singularity_args;

  if ( $is_pvs{$alt_cmd} || $image_version =~ /^pvstodghill\// ) {
    push @singularity_args, "-e"; # clean environment
    # Mount the current directory as container:/mnt
    push @singularity_args, "-c"; # use minimal /dev
    push @singularity_args, "-B", $mount_path.":/mnt";
    if ( $tmp_path ) {
      push @singularity_args, "-B", $tmp_path.":/tmp";
    }
    push @singularity_args, "-H", $mount_path.":/mnt";
    push @singularity_args, "--pwd", "/mnt".$cwd_suffix;
  }

  if ( $is_gui{$alt_cmd} ) {
    my $DISPLAY = $ENV{DISPLAY};
    ( defined($DISPLAY) ) || die "GUI command, but \$DISPLAY is not set,";
    push @singularity_args, "-B", "/tmp/.X11-unix:/tmp/.X11-unix";
    @exec_args = ( "env", "DISPLAY=$DISPLAY", @exec_args );
  }


  $ENV{LC_ALL} = 'C';
  $image_version = "docker://".$image_version;

  my @silent_arg = $opt_q ? ("-s") : ();
  my $error = run($singularity_cmd, @silent_arg, "run", @singularity_args, $image_version, @exec_args);

  return $error;
}


# ------------------------------------------------------------------------
# The command implementations
# ------------------------------------------------------------------------

my @all_names = sort (keys(%is_command));

# ------------------------------------------------------------------------

my ($_pull,$_exec);
($_pull,$_exec) = (\&_docker_do_pull,\&_docker_do_exec) if ( $opt_b eq "docker");
($_pull,$_exec) = (\&_singularity_do_pull,\&_singularity_do_exec) if ( $opt_b eq "singularity");
(defined($_pull) && defined($_exec)) || die "can't happen,";

# ------------------------------------------------------------------------

sub do_list {
  foreach my $name (@all_names) {
    my $image = $image_of{$name};
    my $version = $version_of{$name};
    if (defined($image)) {
      print "$name - $image:$version\n";
    } else {
      print "$name - (direct)\n";
    }
  }
  return 0;
}
;

# ------------------------------------------------------------------------

sub do_pull {
  my @names;
  foreach my $name ( @ARGV ) {
    if ( $name eq "*" ) {
      push @names, @all_names;
    } else {
      push @names, $name;
    }
  }
  my %to_pull;
  foreach my $name (@names) {
    my $image = $image_of{$name};
    my $version = $version_of{$name};
    if (defined($image)) {
      $to_pull{$image.":".$version} = TRUE;
    }
  }

  foreach my $image (sort(keys %to_pull)) {
    my $stat = $_pull->($image);
    if ( $stat != 0 ) {
      return $stat;
    }
  }

  return 0;
}

# ------------------------------------------------------------------------

sub do_exec {

  my ($exec_cmd,@cmd_args) = @ARGV;
  if (!defined($exec_cmd)) {
    usage(1);
  }
  my $alt_cmd = $exec_cmd;
  if ( $opt_c ) { $alt_cmd = $opt_c; }
  
  my $image = $image_of{$alt_cmd};
  if ( !defined($image) ) {
    die "Cannot find image for command: $alt_cmd,";
    #return run($exec_cmd,@cmd_args);
  }
  my $version = $version_of{$alt_cmd};
  my $image_version = $image.":".$version;

  my @exec_args;

  if ( $opt_s ) {
    ( ! $is_implicit{$alt_cmd} )
      || die "-s does not work (probably) with implicit commands,";
    push @exec_args, "/bin/bash";
  } else {
    if ( ! $is_implicit{$alt_cmd} ) {
      push @exec_args, $exec_cmd;
    }
    push @exec_args, @cmd_args;
  }

  if (!$opt_q) {
    print STDERR "### $image_version\n";
  }

  my $error = $_exec->($image_version,$alt_cmd,@exec_args);

  return $error;
}

# ------------------------------------------------------------------------
# Execute the command
# ------------------------------------------------------------------------

my $exit_stat;
if ( $opt_l ) {
  $exit_stat = do_list();
} elsif ( $opt_p ) {
  $exit_stat = do_pull();
} else {
  $exit_stat = do_exec();
}
exit($exit_stat);

# ------------------------------------------------------------------------

sub run {
  diag(join(" ","++",@_));
  my $stat;
  if ( $opt_n ) {
    $stat = 0;
  } else {
    $stat = system(@_);
  }
  # copied from perlfunc(1)
  if ($? == -1) {
    print STDERR "### failed to execute: $!\n";
  } elsif ($? & 127) {
    printf STDERR  "### child died with signal %d, %s coredump\n",
      ($? & 127),  ($? & 128) ? 'with' : 'without';
  }
  return ($? >> 8);
}

# ------------------------------------------------------------------------
# Darwin specific hacks
# ------------------------------------------------------------------------

my $darwin_socat_pid;

sub darwin_x11_args {
  # fixme: hard coded path is ugly!
  if ( ! -e "/usr/local/bin/socat" ) {
    die "\"socat\" is required for GUI apps, but was not found.";
  }

  # Find an IP.
  my $ip;
  for (my $i=0; !defined($ip); $i++) {
    open(my $fh, "-|", "ifconfig en$i 2>&1") || die;
    while (<$fh>) {
      chomp;
      if ( /^ifconfig: interface en[0-9]+ does not exist/ ) {
	die "Need an IP address to continue,";
      }
      if ( /^\tinet +([0-9.]+) +/ ) {
	$ip = $1;
	last;
      }
    }
    close $fh;
  }

  # Start socat
  use POSIX;
  my $pid = fork();
  if (!defined($pid)) {
    die "cannot fork,";
  }
  if ( $pid == 0 ) {
    # Child
    my $DISPLAY = $ENV{DISPLAY};
    close STDERR;
    close STDOUT;
    exec("socat TCP-LISTEN:6000,reuseaddr,fork UNIX-CLIENT:\\\"$DISPLAY\\\"");
    die "Whoops. This should never be reached,";
  } else {
    # Parent
    diag("# starting socat, pid $pid");
    $darwin_socat_pid = $pid;
    sleep 1;			# fixme: ugly hack.
    return ("-e", "DISPLAY=$ip:0");
  }
}

# fixme: should recognize when socat dies.


sub darwin_x11_cleanup {
  # Shutdown socat
  my $pid = $darwin_socat_pid;
  if (!defined($pid)) { return; }
  diag("# stopping socat, pid $pid");
  kill 'QUIT', $pid;
  wait(); # fixme: is this safe?
}

sub diag {
  if ( !$opt_v ) { return; }
  print STDERR @_,"\n";
}

END {
  # fixme: is this safe?
  darwin_x11_cleanup();
}
