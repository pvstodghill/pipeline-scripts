#! /usr/bin/env perl

use strict;
use warnings FATAL => 'all';
#use Carp::Always;

# use FindBin;
# use lib "$FindBin::Bin";
# use Xyzzy;

use constant { TRUE => 1, FALSE => 0 };

use constant { DEFAULT_LIMIT => -1, DEFAULT_START_ROW => 1 };

use Getopt::Std;
use Excel::Writer::XLSX;
use Text::CSV::Simple;
use File::Basename;

my $default_width = 10;

our $opt_H;
our $opt_a = FALSE;
our $opt_h;
our $opt_o = "output.xlsx";
our $opt_w = 0;

my $stat = getopts('Haho:w:');
if (!$stat || $opt_h) {
  print "Usage: $0 [options] [sheet_title:file1.tsv file2.tsv ...]\n";
  print "-H - first line is _not_ header\n";
  print "-a - autofit column widths\n";
  print "-h - print this message and exit.\n";
  print "-o FILENAME - output file name [$opt_o]\n";
  print "-w NUM - maximum column width\n";
  print "if -a and -w NUM are both specified, the min of each width is used.\n";
  exit($stat);
}

if ( scalar(@ARGV) == 0 ) {
  # Hail Mary!
  push @ARGV, "/dev/stdin";
}

(!$opt_H) || die "-H not implemented,";

my $outfile = $opt_o;
my $workbook = Excel::Writer::XLSX->new($outfile);

my $header_fmt = $workbook->add_format();
$header_fmt->set_bold(1);
$header_fmt->set_underline(1);

my $bold_fmt = $workbook->add_format();
$bold_fmt->set_bold(1);

foreach my $raw_infile ( @ARGV ) {
  my ($title,$infile);
  if ( $raw_infile =~ /^(.*):(.*)/ ) {
    ($title,$infile) = ($1,$2);
  } else {
    $title = basename($raw_infile,".tsv");
    $infile = $raw_infile;
  }
  process_file($infile,$title,$workbook);
}

# Add a tsv file to the workbook
sub process_file {
  my ($infile,$title,$workbook) = @_;

  my $parser = Text::CSV::Simple->new({sep_char => "\t", quote_char => undef});
  my @data = $parser->read_file($infile);
  my $headers = shift @data;
  import_data($workbook, $title, $headers, [@data]);
}

# ------------------------------------------------------------------------
# Swiped from https://www.perlmonks.org/?node_id=635437
# ------------------------------------------------------------------------



# Add a worksheet
sub import_data {
	my $workbook  = shift;
	my $base_name = shift;
	my $colums    = shift;
	my $data      = shift;
	my $limit     = shift || DEFAULT_LIMIT;
	my $start_row = shift || DEFAULT_START_ROW;
	my $worksheet = $workbook->add_worksheet($base_name);
	$worksheet->add_write_handler(qr[\w], \&store_string_widths);
	my $w = 1;
	$worksheet->write('A' . $start_row, $colums, ,$header_fmt);
	my $i = $start_row;
	my $qty = 0;
	for my $row (@$data) {
	    $qty++;
	    if ($limit > -1 && $i > $limit) {
			 $i = $start_row;
			 $w++;
			 $worksheet = $workbook->add_worksheet("$base_name - $w");
			 $worksheet->write('A1', $colums,$header_fmt);
		}
		$worksheet->write($i++, 0, $row);
	}
	set_columns_width($worksheet,$opt_a,$opt_w);

	#warn "Convereted $qty rows.";
	return $worksheet;
}


###############################################################################
###############################################################################
#
# Functions used for Autofit.
#

sub min {
  my ($x,$y) = @_;
  if (!defined($y) || $x < $y) {
    return $x;
  } else {
    return $y;
  }
}

sub max {
  my ($x,$y) = @_;
  if (!defined($y) || $x > $y) {
    return $x;
  } else {
    return $y;
  }
}

###############################################################################
#
# Adjust the column widths to fit the longest string in the column.
#
sub set_columns_width {
  my ($worksheet,$autofit_p,$max_width) = @_;

  my @autofit_widths = @{$worksheet->{__col_widths}};

  for (my $col=0; $col<scalar(@autofit_widths); $col++) {
    my $width;
    if ($autofit_p) {
      if ($max_width > 0) {
	$width = min($autofit_widths[$col],$max_width);
      } else {
	$width = max($autofit_widths[$col],1);
      }
    } else {
      if ($max_width > 0) {
	$width = $max_width;
      } else {
	$width = $default_width;
      }
    }

    $worksheet->set_column($col, $col, $width);
  }
}


###############################################################################
#
# The following function is a callback that was added via add_write_handler()
# above. It modifies the write() function so that it stores the maximum
# unwrapped width of a string in a column.
#
sub store_string_widths {

    my $worksheet = shift;
    my $col       = $_[1];
    my $token     = $_[2];

    # Ignore some tokens that we aren't interested in.
    return if not defined $token;       # Ignore undefs.
    return if $token eq '';             # Ignore blank cells.
    return if ref $token eq 'ARRAY';    # Ignore array refs.
    return if $token =~ /^=/;           # Ignore formula

    # Ignore numbers
    #return if $token =~ /^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?$/;

    # Ignore various internal and external hyperlinks. In a real scenario
    # you may wish to track the length of the optional strings used with
    # urls.
    return if $token =~ m{^[fh]tt?ps?://};
    return if $token =~ m{^mailto:};
    return if $token =~ m{^(?:in|ex)ternal:};


    # We store the string width as data in the Worksheet object. We use
    # a double underscore key name to avoid conflicts with future names.
    #
    my $old_width    = $worksheet->{__col_widths}->[$col];
    my $string_width = string_width($token);

    if (not defined $old_width or $string_width > $old_width) {
        # You may wish to set a minimum column width as follows.
        #return undef if $string_width < 10;

        $worksheet->{__col_widths}->[$col] = $string_width;
    }


    # Return control to write();
    return undef;
}


###############################################################################
#
# Very simple conversion between string length and string width for Arial 10.
# See below for a more sophisticated method.
#
sub string_width {

    return length $_[0];
}
