#! /bin/bash

function cleanup {
    set +x
    if [ "$fna_file" ] ; then
	rm -f $fna_file
    fi
    if [ "$faa_file" ] ; then
	rm -f $faa_file
    fi
}
trap cleanup EXIT

PROGNAME=`basename $0`
PROGDIR=`dirname $0`
#HOWTO="${HOWTO:-howto}"

function usage {
    echo 1>&2 "Usage: $PROGNAME [options] [file.fna ...]"
    echo 1>&2 "-f FILE - write FAA to FILE"
    echo 1>&2 "-g FILE - write GFF to FILE"
    echo 1>&2 "-h - this message"
    echo 1>&2 "-s N - min orf size of N nucleotides"
    echo 1>&2 "one or both of -f or -g must be specified."
    exit "$@"
}    

opt_s=0
while getopts 'f:g:hs:' opt ; do
    case "$opt" in
	f) opt_f="$OPTARG" ;;
	g) opt_g="$OPTARG" ;;
	h) opt_h=1 ;;
	s) opt_s="$OPTARG" ;;
	\?) usage 1 ;;
	*) echo "Can't happen" ; exit 1 ;;
    esac
done
shift $((OPTIND-1))

if [ "$opt_h" ] ; then
    usage
fi
if [ -z "$opt_f" -a -z "$opt_g" ] ; then
    usage 1
fi

fna_file=`mktemp $PROGNAME.XXX.fna`
faa_file=`mktemp $PROGNAME.XXX.faa`

cat "$@" > $fna_file

$HOWTO getorf -circular Y -minsize $opt_s -sequence $fna_file \
       -outseq /dev/stdout 2>/dev/null \
       > $faa_file
if [ $? != 0 ] ; then
    echo 1>&2 getorf failed. check emboss. check input.
    exit 1
fi


function cleaned_faa {
    cat $faa_file | sed -r -e 's/^(>[^ ]+) .*/\1/'
}

if [ "$opt_f" = "-" ] ; then
    cleaned_faa
elif [ "$opt_f" ] ; then
    cleaned_faa > $opt_f
fi

if [ "$opt_g" ] ; then

    if [ "$opt_g" = "-" ] ; then
	gff_file=/dev/stdout
    else
	gff_file="$opt_g"
	rm -f $gff_file
    fi

    set -e
    (
	echo '##gff-version 3'
	cat $fna_file | $PROGDIR/$PROGNAME.fasta2gff_length
	cat $faa_file | $PROGDIR/$PROGNAME.getorf-faa2gff
    ) > $gff_file

fi


