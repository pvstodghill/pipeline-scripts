#! /usr/bin/env perl

use strict;
use feature 'postderef';
use warnings FATAL => 'all';
no warnings "experimental::postderef";
#use Carp::Always;

# use FindBin;
# use lib "$FindBin::Bin";
# use Xyzzy;

use constant { TRUE => 1, FALSE => 0 };

# 'wide character' warning.
binmode(STDIN, ":utf8");
binmode(STDOUT, ":utf8");

# ------------------------------------------------------------------------

use File::Basename;
use Getopt::Std;

our $opt_h;

my $usage_str = "";
my $progname = basename($0);
$usage_str .= "Usage: $progname [options] ...\n";

$usage_str .= "-h - print help\n";

sub usage {
  print STDERR $usage_str;
  exit(@_);
}

my $stat = getopts('h');
if (!$stat) {
  usage(1);
}
if ($opt_h) {
  usage();
}

# ------------------------------------------------------------------------

my $print_by_default = 1;
my %to_activate;
my %to_suppress;
for my $k ( @ARGV ) {
  $k = lc($k);
  if ( $k =~ /-(.*)/ ) {
    $to_suppress{$1} = 1;
  } else {
    $to_activate{$k} = 1;
    $print_by_default = 0;
  }
}

if ( scalar(keys %to_activate) > 0 &&
     scalar(keys %to_suppress) > 0 ) {
  print STDERR "# Printing of features are being both activated and suppressed.\n";
  print STDERR "# Results are not probably not what you expect.\n";
}

# vvvvvvvvvvvvvvvvvvvv
$print_by_default = 0;
%to_activate = ( lc("CDS") => 1 );
%to_suppress = ();
# ^^^^^^^^^^^^^^^^^^^^

# ------------------------------------------------------------------------

my $accession;

my $first;
my ($key,$loc,@rest);


sub emit {
  if (!defined($key)) {
    return;
  }
  {
    my $key = lc $key;
    if ( $to_activate{$key} ) {
      # ok
    } elsif ( $to_suppress{$key} ) {
      return;
    } elsif ($print_by_default) {
      # ok
    } else {
      return;
    }
  }
  my @raw_fields = ($loc);
  foreach my $l ( @rest ) {
    if ( $l =~ /^\/[^ ]/ ) {
      push @raw_fields, $l;
    } else {
      $raw_fields[-1] .= " " . $l;
    }
  }
  $loc = shift @raw_fields;

  my %fields;
  foreach my $raw_field ( @raw_fields ) {
    my ($name,$value);
    if ($raw_field =~ /^\/([^=]+)="?([^"]*)"?$/) {
      ($name,$value) = ($1,$2);
    } elsif ($raw_field =~ /^\/([^=]+)$/) {
      ($name,$value) = ($1,"true");
    } else {     
      die("raw_field=<<$raw_field>>\n".join("\n",@raw_fields));
    }
    $value =~ s/\//%2f/g;
    $value =~ s/,/%2c/g;
    $value =~ s/"/%22/g;
    $value =~ s/;/%3b/g;
    if ( defined($fields{$name}) ) {
      $fields{$name} .= ",".$value;
    } else {
      $fields{$name} = $value;
    }
  }

  my @attributes;
  foreach my $name (sort (keys %fields)) {
    my $value=$fields{$name};
    push @attributes, "$name=$value";
  }
  my $attributes = join(";",@attributes);

  # vvvvvvvvvvvvvvvvvvvv
  # foreach my $loc ( @locs ) {
  #   my ($start,$end,$strand) = @$loc;
  #   print join("\t",$accession,"gbk2gff",$key,$start,$end,".",$strand,".",$attributes),"\n";
  # }

  my $translation = $fields{translation};
  if (!defined($translation)) {
    # No translation. Pseudogene?
    return;
  }

  my $locus_tag = $fields{locus_tag};
  (defined($locus_tag)) || die "no locus_tag <<$locus_tag>>,";

  my $num;
  if ($locus_tag =~ /_([0-9]+)$/) {
    $num = $1;
  } elsif ($locus_tag =~ /_RS([0-9]+)$/) {
    $num = $1;
  } else {
    die "locus tag without number? <<$locus_tag>>,";
  }

  my $suffix = $locus_tag;
  if (defined($fields{product})) {
    $suffix .= " | ".$fields{product};
  }

  print ">".$accession."_".$num,' ',$suffix,"\n";
  $translation =~ s/ //g;
  while (length($translation) > 70) {
    print substr($translation,0,70),"\n";
    $translation = substr($translation,70);
  }
  if (length($translation) > 0) {
    print $translation,"\n";
  }
  # ^^^^^^^^^^^^^^^^^^^^

}

# ------------------------------------------------------------------------

my $parsing_features = FALSE;


while (<STDIN>) {
  if ( $_ =~ /^LOCUS +([^ ]+)/ ) {
    $accession = $1;
    #print STDERR "## $accession\n";
    next;
  } elsif ( $_ =~ /^FEATURES    / ) {
    $parsing_features = TRUE;
    next;
  } elsif ( $_ =~ /^[A-Z]/ || $_ =~ /^\/\// ) {
    emit();
    $parsing_features = FALSE;
    next;
  } elsif (!$parsing_features) {
    next;
  }

  $_ =~ s/[\r\n]+$//;
  chomp;
  if ( $_ =~ /^[A-Z]/ ) {
    die;
  }
  if ( $_ =~ /^     ([^ ]+) + ([^ ]+$)/ ) {
    emit();
    $first = $_;
    ($key,$loc) = ($1,$2);
    @rest = ();
  } else {
    s/^ +//;
    push @rest, $_;
  }
  
}



