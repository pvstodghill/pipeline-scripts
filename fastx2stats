#! /usr/bin/env perl

use strict;
use warnings FATAL => 'all';
#use Carp::Always;
use POSIX;

# use FindBin;
# use lib "$FindBin::Bin";
# use Xyzzy;

use constant { TRUE => 1, FALSE => 0 };

# ------------------------------------------------------------------------
# Process the command line
# ------------------------------------------------------------------------

use File::Basename;
use Getopt::Std;

our $opt_a = 0;
our $opt_d = ' ';
our $opt_h;
our $opt_s;
our $opt_t;
our $opt_q = 0;

sub usage {
  my $progname = basename($0);
  print STDERR "Usage: cat foo.fastx | $progname [options]\n";
  print STDERR "-d STR - delimiter for short output\n";
  print STDERR "-a - input is FASTA\n";
  print STDERR "-h - print help\n";
  print STDERR "-q - input is FASTQ\n";
  print STDERR "-s - short output\n";
  print STDERR "-t TAG - add TAG to output\n";
  print STDERR "Either -a or -q is required\n";
  exit(@_);
}

my $stat = getopts('ad:hqst:');
if (!$stat) {
  usage(1);
}
if ($opt_h) {
  usage();
}
if (scalar(@ARGV) != 0) {
  usage(1);
}

if ( $opt_a + $opt_q != 1 ) {
  usage(1);
}

# ------------------------------------------------------------------------

my @lens;

my $do_spot_check = TRUE;

if ( $opt_q ) {

  my $linenum=0;
  while (<STDIN>) {
    if ($do_spot_check) {
      if ($_ !~ /^@/ ) {
	print STDERR "Does not appear to be a FASTQ file. Did you forget to uncompress?\n";
	exit(1);
      }
      $do_spot_check = FALSE;
    }
    $linenum++;
    if ($linenum == 2) {
      chomp;
      my $len = length($_);
      push @lens, $len;
    } elsif ($linenum == 4) {
      $linenum = 0;
    }
  }

} elsif ( $opt_a ) {
  my $seq;
  while (<STDIN>) {
    if ($do_spot_check) {
      if ($_ !~ /^>/ ) {
	print STDERR "Does not appear to be a FASTA file. Did you forget to uncompress?\n";
	exit(1);
      }
      $do_spot_check = FALSE;
    }
    chomp;
    if (/>/) {
      if (defined($seq)) {
	push @lens, length($seq);
	$seq = "";
      }
    } else {
      $seq .= $_;
    }
  }
  if (defined($seq)) {
    push @lens, length($seq);
  }
} else {
  die;
}

# ------------------------------------------------------------------------

my $num_seqs = scalar(@lens);
# ($num_seqs > 0) || die;

@lens = sort { $b <=> $a} @lens;

my $min_length = $lens[-1];
my $max_length = $lens[0];

# --------------------------------------------------

my $median;
my $j = POSIX::floor($num_seqs / 2);
if ( $num_seqs % 2 == 1 ) {
  # the "middle" value
  $median = $lens[$j];
} else {
  # the mean of the "middle" two value
  $median = ($lens[$j-1]+$lens[$j])/2;
}

# --------------------------------------------------

my $num_bases = 0;
foreach my $len ( @lens ) {
  $num_bases += $len;
}

# --------------------------------------------------

my $mean = ($num_bases*1.0)/$num_seqs;

# --------------------------------------------------

my $i=0;
my $sum=0;
while ($sum < $num_bases/2.0) {
  $sum += $lens[$i];
  $i++;
}

my $n50;
my $l50;

if ($i == scalar(@lens)) {
  ($i == 1) || die "how else does it happen?,";
  $n50 = $l50 = "undef";
} else {
  $n50 = sprintf("%d",$lens[$i]);
  $l50 = sprintf("%d",$i+1);
}


# --------------------------------------------------

if ( !$opt_s ) {
  if ( $opt_t ) {
    printf("# %s\n", $opt_t);
  }
  printf("Number of seqs: %d\n",$num_seqs);
  printf("Number of Bases: %d\n",$num_bases);
  printf("Median: %d\n",$median);
  printf("Mean: %.2f\n",$mean);
  printf("N50: %s\n",$n50);
  printf("L50: %s\n",$l50);
  printf("Minimum: %d\n",$min_length);
  printf("Maximum: %d\n",$max_length);
} else {
  if ( $opt_t ) {
    printf("%s%s", $opt_t, $opt_d);
  }
  printf("%d%s",$num_seqs, $opt_d);
  printf("%d%s",$num_bases, $opt_d);
  printf("%d%s",$median, $opt_d);
  printf("%.2f%s",$mean, $opt_d);
  printf("%s%s",$n50, $opt_d);
  printf("%s%s",$l50, $opt_d);
  printf("%d%s",$min_length, $opt_d);
  printf("%d\n",$max_length);
}
