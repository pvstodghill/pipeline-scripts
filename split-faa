#! /usr/bin/env perl

use strict;
use feature 'postderef';
use warnings FATAL => 'all';
no warnings "experimental::postderef";
#use Carp::Always;

# use FindBin;
# use lib "$FindBin::Bin";
# use Xyzzy;

use constant { TRUE => 1, FALSE => 0 };

# 'wide character' warning.
binmode(STDIN, ":utf8");
binmode(STDOUT, ":utf8");

# ------------------------------------------------------------------------

use File::Basename;
use Getopt::Std;

our $opt_d = ".";
our $opt_h;

my $usage_str = "";
my $progname = basename($0);
$usage_str .= "Usage: $progname [options] foo.faa foo.gff\n";

$usage_str .= "-d DIR - output to DIR [$opt_d]\n";
$usage_str .= "-h - print help\n";

sub usage {
  print STDERR $usage_str;
  exit(@_);
}

my $stat = getopts('d:h');
if (!$stat) {
  usage(1);
}
if ($opt_h) {
  usage();
}
if (scalar(@ARGV) != 2) {
  usage(1);
}

my ($faa_fn,$gff_fn) = @ARGV;

# ------------------------------------------------------------------------

use constant { NO_VALUE => ";no-value;" };

sub parse_gff_attributes {
  my ($raw_attributes) = @_;
  my $attributes = {};
  foreach my $key_val (split(/; */,$raw_attributes)) {
    my ($key,$val);
    if ( $key_val =~ /^([^=]+)=(.*)/ ) {
      ($key,$val) = ($1,$2);
    } else {
      ($key,$val) = ($key_val, NO_VALUE);
    }
    $attributes->{$key} = $val;
  }
  return $attributes;
}

# ------------------------------------------------------------------------

my $accessions_of = {};

open(my $gff_fh,"<",$gff_fn) || die "Cannot open: $gff_fn,";
while (<$gff_fh>) {
  chomp;
  $_ =~ s/\r+//;
  if ( /^#/ ) {
    if ( $_ eq "##FASTA" ) {
      last;
    }
    next;
  }
  my ($accession,$source,$feature,$start,$end,
      $score,$strand,$frame,$raw_attributes) = split(/\t/,$_);
  my $attributes = parse_gff_attributes($raw_attributes);

  if ( $feature ne "CDS" ) {
    next;
  }

  if (defined($attributes->{pseudo})) {
    next;
  }

  my $protein_id = $attributes->{protein_id};
  if (!(defined($protein_id))) {
    use Data::Dumper;
    print Dumper($attributes),"\n";
    die "Could not find protein_id attr on CDS record,";
  }
  $protein_id =~ s/^gnl\|Prokka\|//;
  $protein_id =~ s/^extdb://;

  if (!defined($accessions_of->{$protein_id})) {
    $accessions_of->{$protein_id} = {};
  }
  $accessions_of->{$protein_id}->{$accession} = TRUE;
}
close($gff_fh);

# ------------------------------------------------------------------------

my $contents_of = {};
my $protein_id;
my $accessions;

open(my $faa_fh,"<",$faa_fn) || die "Cannot open: $faa_fn,";
while (<$faa_fh>) {
  if ( />([^ ]*)/ ) {
    $protein_id = $1;
    (defined($protein_id) && $protein_id ne "") || die;
    $protein_id =~ s/^gnl\|extdb\|//;
    $accessions = $accessions_of->{$protein_id};
    (defined($accessions)) || die "missing: <<$protein_id>>,";
    foreach my $accession (keys($accessions->%*)) {
      if (!defined($contents_of->{$accession})) {
	$contents_of->{$accession} = "";
      }
    }
  }
  foreach my $accession (keys($accessions->%*)) {
    $contents_of->{$accession} .= $_;
  }
}

# ------------------------------------------------------------------------

foreach my $accession ( sort (keys $contents_of->%*) ) {
  my $out_name = $accession;
  if ( $out_name =~ /\|/ ) {
    my ($db,$accession,$extra) = split(/[|]/,$out_name);
    if ( $db eq "gnl" && $accession eq "Prokka" ) {
      ($db,$accession,$extra) = ("gnl|Prokka",$extra,"");
    } elsif ( $db eq "gnl" && $accession eq "extdb" ) {
      ($db,$accession,$extra) = ("gnl|extdb",$extra,"");
    } else {
      ($db eq "lcl" || $db eq "gb") || die "[1]cannot parse seqname=<<$out_name>>,";
    }
    ($extra eq "") || die "[2]cannot parse seqname=<<$out_name>>,";
    $out_name = $accession;
  }
  my $out_file =  $opt_d."/".$out_name.".faa";
  open(my $out_fh, ">", $out_file) || die "Cannot open for writing <<$out_file>>,";
  print $out_fh $contents_of->{$accession};
  close($out_fh);
}
